package dev.tenacity.module.impl.exploit;

import com.viaversion.viaversion.util.MathUtil;
import de.florianmichael.vialoadingbase.ViaLoadingBase;
import dev.tenacity.Client;
import dev.tenacity.event.annotations.EventTarget;
import dev.tenacity.event.impl.network.PacketEvent;
import dev.tenacity.event.impl.player.MotionEvent;
import dev.tenacity.event.impl.player.UpdateEvent;
import dev.tenacity.module.Category;
import dev.tenacity.module.Module;
import dev.tenacity.module.settings.impl.BooleanSetting;
import dev.tenacity.module.settings.impl.ModeSetting;
import dev.tenacity.utils.Utils;
import dev.tenacity.utils.player.ChatUtil;
import dev.tenacity.utils.server.PacketUtils;
import lombok.Getter;
import net.minecraft.client.gui.GuiDownloadTerrain;
import net.minecraft.network.INetHandler;
import net.minecraft.network.Packet;
import net.minecraft.network.login.server.S00PacketDisconnect;
import net.minecraft.network.login.server.S01PacketEncryptionRequest;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.*;
import net.minecraft.network.status.server.S00PacketServerInfo;
import net.minecraft.network.status.server.S01PacketPong;
import net.minecraft.util.BlockPos;
import net.minecraft.util.EnumFacing;
import java.util.concurrent.ConcurrentLinkedDeque;
import java.util.concurrent.CopyOnWriteArrayList;

public final class Disabler extends Module {
    public static final ModeSetting modeValue = new ModeSetting("Mode", "GrimAC", "GrimAC");
    public static final BooleanSetting duplicateRotPlace = new BooleanSetting("DuplicateRotPlace", true);
    private final BooleanSetting fastBreak = new BooleanSetting("FastBreak", true);
    private final BooleanSetting viaC0B = new BooleanSetting("Via-C0B", true);
    private final BooleanSetting fabricatedPlace = new BooleanSetting("FabricatedPlace", true);
    private final BooleanSetting debug = new BooleanSetting("Debug", true);
    @Getter
    public CopyOnWriteArrayList<Packet<INetHandler>> storedPackets = new CopyOnWriteArrayList<>();
    @Getter
    public ConcurrentLinkedDeque<Integer> pingPackets = new ConcurrentLinkedDeque<>();
    private static boolean lastResult;
    public Disabler() {
        super("module.exploit.disabler", Category.EXPLOIT, "Disables some anti cheats");
        fastBreak.addParent(modeValue, sb -> modeValue.is("GrimAC"));
        viaC0B.addParent(modeValue, sb -> modeValue.is("GrimAC"));
        duplicateRotPlace.addParent(modeValue, sb -> modeValue.is("GrimAC"));
        fabricatedPlace.addParent(modeValue, sb -> modeValue.is("GrimAC"));
        addSettings(modeValue, duplicateRotPlace, fastBreak, viaC0B, fabricatedPlace, debug);
    }

    @EventTarget
    public void onUpdateEvent(UpdateEvent event) {
        if (modeValue.is("GrimAC")) {
            if (!getGrimPost()) {
                processPackets();
            }
        }
    }

    @EventTarget
    public void onMotionEvent(MotionEvent event) {
        setSuffix(modeValue.getMode());
        if (modeValue.is("GrimAC")) {
            if (viaC0B.isEnabled()) {
                if (mc.thePlayer.movementInput.sneak) {
                    PacketUtils.sendPacket(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.START_SNEAKING));
                } else {
                    PacketUtils.sendPacket(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.STOP_SNEAKING));
                }
            }
        }
    }

    @EventTarget
    public void onPacketEvent(PacketEvent event) {
        Packet<?> packet = event.getPacket();
        if (modeValue.is("GrimAC")) {
            if (this.fastBreak.isEnabled() && packet instanceof C07PacketPlayerDigging c07 && ((C07PacketPlayerDigging) packet).getStatus() == C07PacketPlayerDigging.Action.STOP_DESTROY_BLOCK) {
                PacketUtils.sendPacketNoEvent(new C07PacketPlayerDigging(C07PacketPlayerDigging.Action.ABORT_DESTROY_BLOCK, c07.getPosition(), c07.getFacing()));
            }
            if (this.fabricatedPlace.isEnabled()) {
                if (packet instanceof C08PacketPlayerBlockPlacement c08) {
                    c08.facingX = 0.5f;
                    c08.facingY = 0.5f;
                    c08.facingZ = 0.5f;
                }
            }
            if (packet instanceof C07PacketPlayerDigging c07) {
                if (c07.getStatus() == C07PacketPlayerDigging.Action.RELEASE_USE_ITEM && ViaLoadingBase.getInstance().getTargetVersion().getVersion() >= 47) {
                    if (c07.getFacing() != EnumFacing.DOWN || c07.getPosition().getX() != 0 || c07.getPosition().getY() != 0 || c07.getPosition().getZ() != 0) {
                        c07.setFacing(EnumFacing.DOWN);
                        c07.setPosition(BlockPos.ORIGIN);
                    }
                }
            }
            if (packet instanceof C03PacketPlayer.C06PacketPlayerPosLook c06) {
                if (c06.getPitch() > 90 || c06.getPitch() < -90) {
                    c06.setPitch((float) MathUtil.clamp((int) c06.getPitch(), -90, 90));
                }
            }
        }
    }

    public boolean getGrimPost() {
        if (!modeValue.is("GrimAC")) {
            return false;
        }
        boolean result;
        result = mc.thePlayer != null && !(mc.currentScreen instanceof GuiDownloadTerrain);
        if (lastResult && !result) {
            lastResult = false;
            mc.addScheduledTask(this::processPackets);
        }
        lastResult = result;
        return lastResult;
    }

    public boolean grimPostDelay(Packet<?> packet) {
        if (!modeValue.is("GrimAC")) {
            return false;
        }
        if (mc.thePlayer == null || mc.currentScreen instanceof GuiDownloadTerrain || packet instanceof S00PacketServerInfo || packet instanceof S01PacketEncryptionRequest || packet instanceof S38PacketPlayerListItem || packet instanceof S00PacketDisconnect || packet instanceof S21PacketChunkData || packet instanceof S01PacketPong || packet instanceof S44PacketWorldBorder || packet instanceof S01PacketJoinGame || packet instanceof S19PacketEntityHeadLook || packet instanceof S3EPacketTeams || packet instanceof S02PacketChat || packet instanceof S2FPacketSetSlot || packet instanceof S1CPacketEntityMetadata || packet instanceof S20PacketEntityProperties || packet instanceof S35PacketUpdateTileEntity || packet instanceof S03PacketTimeUpdate || packet instanceof S47PacketPlayerListHeaderFooter) {
            return false;
        }
        if (packet instanceof S12PacketEntityVelocity s12) {
            return s12.getEntityID() == mc.thePlayer.getEntityId();
        } else if (packet instanceof S27PacketExplosion || packet instanceof S13PacketDestroyEntities || packet instanceof S32PacketConfirmTransaction || packet instanceof S08PacketPlayerPosLook || packet instanceof S18PacketEntityTeleport || packet instanceof S19PacketEntityStatus || packet instanceof S04PacketEntityEquipment || packet instanceof S23PacketBlockChange || packet instanceof S22PacketMultiBlockChange || packet instanceof S00PacketKeepAlive || packet instanceof S06PacketUpdateHealth || packet instanceof S14PacketEntity || packet instanceof S0FPacketSpawnMob || packet instanceof S2DPacketOpenWindow || packet instanceof S30PacketWindowItems || packet instanceof S3FPacketCustomPayload) {
            return true;
        } else {
            return packet instanceof S2EPacketCloseWindow;
        }
    }

    public void processPackets() {
        if (!modeValue.is("GrimAC")) {
            return;
        }
        if (!storedPackets.isEmpty()) {
            for (Packet<INetHandler> packet : storedPackets) {
                PacketEvent event = new PacketEvent(packet, PacketEvent.PacketEventType.RECEIVE);

                Client.INSTANCE.getEventManager().call(event);

                if (!event.isCancelled()) {
                    packet.processPacket(mc.getNetHandler());
                }
            }
            storedPackets.clear();
        }
    }

    public void fixC0F(C0FPacketConfirmTransaction packet) {
        if (!modeValue.is("GrimAC")) {
            return;
        }

        int id = packet.getUid();

        if (id >= 0 || pingPackets.isEmpty()) {
            mc.getNetHandler().addToSendQueue(packet);
            return;
        }

        do {
            int current = pingPackets.getFirst();
            PacketUtils.sendPacket(new C0FPacketConfirmTransaction(packet.getWindowId(), (short) current, true));
            pingPackets.pollFirst();
            if (current == id) {
                return;
            }
        } while (!pingPackets.isEmpty());
    }
}

