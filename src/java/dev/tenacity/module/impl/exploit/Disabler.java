package dev.tenacity.module.impl.exploit;

import com.cubk.event.annotations.EventTarget;
import com.cubk.event.impl.game.WorldEvent;
import com.cubk.event.impl.network.PacketReceiveEvent;
import com.cubk.event.impl.player.MotionEvent;
import com.cubk.event.impl.player.MoveEvent;
import com.cubk.event.impl.player.UpdateEvent;
import dev.tenacity.module.Category;
import dev.tenacity.module.Module;
import dev.tenacity.module.settings.impl.BooleanSetting;
import dev.tenacity.module.settings.impl.ModeSetting;
import dev.tenacity.ui.notifications.NotificationManager;
import dev.tenacity.ui.notifications.NotificationType;
import dev.tenacity.utils.Utils;
import dev.tenacity.utils.player.ChatUtil;
import dev.tenacity.utils.time.TimerUtil;
import lombok.Getter;
import net.minecraft.client.entity.EntityPlayerSP;
import net.minecraft.network.Packet;
import net.minecraft.network.play.INetHandlerPlayClient;
import net.minecraft.network.play.server.*;

import java.util.concurrent.LinkedBlockingQueue;

public final class Disabler extends Module {
    public static TimerUtil slotTimer = new TimerUtil();
    private final ModeSetting disMode = new ModeSetting("Dis", "SW", "BW", "SW");
    private final BooleanSetting modifyRotationValue = new BooleanSetting("EditRotation", false);
    private final BooleanSetting lobbyCheck = new BooleanSetting("LobbyCheck", false);
    private final LinkedBlockingQueue<Packet<INetHandlerPlayClient>> packetQueue = new LinkedBlockingQueue<>();
    @Getter
    public boolean disabling;
    @Getter
    public int s08PacketTickCount;
    private int airTicks;
    private boolean jumpBypassEnabled;
    private boolean pendingInitialJump;

    public Disabler() {
        super("module.exploit.disabler", Category.EXPLOIT, "Disables some anti cheats");
    }

    public static void stopXZ(EntityPlayerSP player) {
        player.motionX = 0.0;
        player.motionZ = 0.0;
    }

    public static void stop(EntityPlayerSP player) {
        stopXZ(player);
        player.motionY = 0.0;
    }

    @Override
    public void onDisable() {
        s08PacketTickCount = 0;
        disabling = false;
        airTicks = 0;
        mc.timer.timerSpeed = 1.0f;
        super.onDisable();
    }

    @EventTarget
    public void onMotionEvent(MotionEvent event) {
        setSuffix("Watchdog");
        if (lobbyCheck.isEnabled() && Utils.isLobby()) return;

        if (jumpBypassEnabled && ((disMode.is("SW") && airTicks >= 3) || (disMode.is("BW") && airTicks >= 10))) {

            if (airTicks % 2 == 0) {
                float randomBoost = nextFloat(0.09f, 0.12f);

                if (modifyRotationValue.isEnabled()) {
                    float newYaw = (float) (mc.thePlayer.rotationYaw - 10 + (Math.random() - 0.5) * 3);
                    event.setRotations(newYaw, mc.thePlayer.rotationPitch);
                }

                event.setZ(event.getZ() + randomBoost);
            }

            stop(mc.thePlayer);
        }
    }

    @EventTarget
    public void onMoveEvent(MoveEvent event) {
        if (lobbyCheck.isEnabled() && Utils.isLobby()) return;

        if (jumpBypassEnabled && ((disMode.is("SW") && airTicks >= 3) || (disMode.is("BW") && airTicks >= 10))) {
            event.setX(0);
            event.setY(0);
            event.setZ(0);
        }
    }

    @EventTarget
    public void onPacketReceiveEvent(PacketReceiveEvent event) {
        if (event.getPacket() instanceof S08PacketPlayerPosLook && jumpBypassEnabled) {
            disabling = true;
            s08PacketTickCount++;
            ChatUtil.print("Process");
            if (s08PacketTickCount == 20) {
                jumpBypassEnabled = false;
                mc.thePlayer.jump();
                airTicks = 0;
                s08PacketTickCount = 0;
                NotificationManager.post(NotificationType.INFO, "Disabler", "Disabled Jump check for Watchdog", 2);
                disabling = false;
            }
        }
        if (event.getPacket() instanceof S32PacketConfirmTransaction s32) {
            if (s32.getActionNumber() == 0)
                event.cancel();
        }
        if (event.getPacket() instanceof S2EPacketCloseWindow || event.getPacket() instanceof S2DPacketOpenWindow) {
            reset();
        }
        if (event.getPacket() instanceof S2FPacketSetSlot || event.getPacket() instanceof S30PacketWindowItems) {
            if (!slotTimer.hasTimeElapsed(200)) {
                event.cancel();
            }
        }
    }

    @EventTarget
    public void onUpdateEvent(UpdateEvent event) {
        if (mc.thePlayer.onGround) {
            airTicks = 0;
        } else {
            airTicks++;
        }

        if (lobbyCheck.isEnabled() && Utils.isLobby()) return;

        if (pendingInitialJump && mc.thePlayer.onGround) {
            mc.thePlayer.jump();
            pendingInitialJump = false;
            jumpBypassEnabled = true;
        }
    }

    @EventTarget
    public void onWorldEvent(WorldEvent event) {
        if (lobbyCheck.isEnabled() && Utils.isLobby()) return;

        pendingInitialJump = true;
        jumpBypassEnabled = false;
        s08PacketTickCount = 0;
        airTicks = 0;
    }

    private void reset() {
        while (!packetQueue.isEmpty()) {
            packetQueue.poll().processPacket(mc.getNetHandler());
        }
    }

    public float nextFloat(float startInclusive, float endInclusive) {
        return startInclusive == endInclusive || endInclusive - startInclusive <= 0.0f ? startInclusive : (startInclusive + (endInclusive - startInclusive) * (float) Math.random());
    }
}

